{"version":3,"sources":["types.ts","Components/ParamsLoader.tsx","Components/ParamsEditor.tsx","Components/PermalinkPrinter.tsx","Components/SignatureCollector.tsx","Components/TransactionCreator.tsx","Viewer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ParamsKeys","defaultParams","maxExtraDataSize","maxAssetSchemeMetadataSize","maxTransferMetadataSize","maxTextContentSize","networkId","minPayTransactionCost","minSetRegularKeyTransactionCost","minCreateShardTransactionCost","minSetShardOwnersTransactionCost","minSetShardUsersTransactionCost","minWrapCccTransactionCost","minCustomTransactionCost","minStoreTransactionCost","minRemoveTransactionCost","minAssetMintCost","minAssetTransferCost","minAssetSchemeChangeCost","minAssetSupplyIncreaseCost","minAssetComposeCost","minAssetDecomposeCost","minAssetUnwrapCccCost","maxBodySize","snapshotPeriod","termSeconds","nominationExpiration","custodyPeriod","releasePeriod","maxNumOfValidators","minNumOfValidators","delegationThreshold","minDeposit","maxCandidateMetadataSize","U64ValueToNumber","value","parseInt","U64","ensure","toString","paramsFromRPCParams","rpcParams","networkID","minPayCost","minSetRegularKeyCost","minCreateShardCost","minSetShardOwnersCost","minSetShardUsersCost","minWrapCccCost","minCustomCost","minStoreCost","minRemoveCost","minMintAssetCost","minTransferAssetCost","minChangeAssetSchemeCost","minIncreaseAssetSupplyCost","minComposeAssetCost","minDecomposeAssetCost","minUnwrapCccCost","max_candidate_metadata_size","paramsToRLPBytes","params","seq","RLP","map","key","paramsAndSignaturesToRLPBytes","signatures","signature","startsWith","bufferToNumber","debugFieldName","length","readUIntBE","err","newError","Error","original","RLPBytesToParams","hex","decoded","Buffer","maxExtraDataSizeRaw","maxAssetSchemeMetadataSizeRaw","maxTransferMetadataSizeRaw","maxTextContentSizeRaw","networkIdRaw","minPayTransactionCostRaw","minSetRegularKeyTransactionCostRaw","minCreateShardTransactionCostRaw","minSetShardOwnersTransactionCostRaw","minSetShardUsersTransactionCostRaw","minWrapCccTransactionCostRaw","minCustomTransactionCostRaw","minStoreTransactionCostRaw","minRemoveTransactionCostRaw","minAssetMintCostRaw","minAssetTransferCostRaw","minAssetSchemeChangeCostRaw","minAssetSupplyIncreaseCostRaw","minAssetComposeCostRaw","minAssetDecomposeCostRaw","minAssetUnwrapCccCostRaw","maxBodySizeRaw","snapshotPeriodRaw","termSecondsRaw","nominationExpirationRaw","custodyPeriodRaw","releasePeriodRaw","maxNumOfValidatorsRaw","minNumOfValidatorsRaw","delegationThresholdRaw","minDepositRaw","maxCandidateMetadataSizeRaw","loadParamsFromRPC","rpcURL","a","sdk","SDK","server","rpc","sendRpcRequest","loadSeqFromRPC","ParamsLoader","props","handleRLPEncodedInputChange","event","text","target","setState","typedRLPEncoded","handleRLPEncodedClick","_event","rawParams","state","newParamsAndSeq","onLoadParamsAndSeq","console","error","alert","handleRPCURLInputChange","typedCodeChainRPCURL","handleRPCURLClick","Promise","all","newParams","newSeq","Col","xs","className","Row","lg","Form","Control","type","this","onChange","placeholder","Button","onClick","variant","Component","ParamsEditor","handleSeqInputChange","typedSeq","onChangeParamsAndSeq","paramsAndSeq","_err","handleParamsInputChange","disabled","Group","Label","column","String","defaultProps","PermalinkPrinter","rlpBytes","to","window","location","href","SignatureCollector","handleRemoveClick","toRemove","name","onRemoveSignature","handleInputChange","typed","handleAddButtonClick","indexOf","onAddSignature","size","TransactionCreator","handleClick","paramsAndSignatures","Viewer","encodedParams","match","Container","noOp","blake256","withRouter","App","Index","handleLoadParamsAndSeq","paramsEditorKey","handleChangeParamsAndSeq","handleAddSignature","handleRemoveSignature","join","Math","random","changedParamsAndSeq","prevState","newSignatures","index","splice","exact","path","component","React","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7af56d47.chunk.js","sourcesContent":["import { U64Value, U64 } from \"codechain-primitives\";\nimport * as RLP from \"rlp\";\n\nexport type NetworkId = string;\n\nexport interface Params {\n  maxExtraDataSize: U64Value;\n  maxAssetSchemeMetadataSize: U64Value;\n  maxTransferMetadataSize: U64Value;\n  maxTextContentSize: U64Value;\n  networkId: NetworkId;\n  minPayTransactionCost: U64Value;\n  minSetRegularKeyTransactionCost: U64Value;\n  minCreateShardTransactionCost: U64Value;\n  minSetShardOwnersTransactionCost: U64Value;\n  minSetShardUsersTransactionCost: U64Value;\n  minWrapCccTransactionCost: U64Value;\n  minCustomTransactionCost: U64Value;\n  minStoreTransactionCost: U64Value;\n  minRemoveTransactionCost: U64Value;\n  minAssetMintCost: U64Value;\n  minAssetTransferCost: U64Value;\n  minAssetSchemeChangeCost: U64Value;\n  minAssetSupplyIncreaseCost: U64Value;\n  minAssetComposeCost: U64Value;\n  minAssetDecomposeCost: U64Value;\n  minAssetUnwrapCccCost: U64Value;\n  maxBodySize: U64Value;\n  snapshotPeriod: U64Value;\n  termSeconds: U64Value;\n  nominationExpiration: U64Value;\n  custodyPeriod: U64Value;\n  releasePeriod: U64Value;\n  maxNumOfValidators: U64Value;\n  minNumOfValidators: U64Value;\n  delegationThreshold: U64Value;\n  minDeposit: U64Value;\n  maxCandidateMetadataSize: U64Value;\n}\n\nexport interface ParamsAndSeq {\n  params: Params;\n  seq: number;\n}\n\nexport const ParamsKeys: (keyof Params)[] = [\n  \"maxExtraDataSize\",\n  \"maxAssetSchemeMetadataSize\",\n  \"maxTransferMetadataSize\",\n  \"maxTextContentSize\",\n  \"networkId\",\n  \"minPayTransactionCost\",\n  \"minSetRegularKeyTransactionCost\",\n  \"minCreateShardTransactionCost\",\n  \"minSetShardOwnersTransactionCost\",\n  \"minSetShardUsersTransactionCost\",\n  \"minWrapCccTransactionCost\",\n  \"minCustomTransactionCost\",\n  \"minStoreTransactionCost\",\n  \"minRemoveTransactionCost\",\n  \"minAssetMintCost\",\n  \"minAssetTransferCost\",\n  \"minAssetSchemeChangeCost\",\n  \"minAssetSupplyIncreaseCost\",\n  \"minAssetComposeCost\",\n  \"minAssetDecomposeCost\",\n  \"minAssetUnwrapCccCost\",\n  \"maxBodySize\",\n  \"snapshotPeriod\",\n  \"termSeconds\",\n  \"nominationExpiration\",\n  \"custodyPeriod\",\n  \"releasePeriod\",\n  \"maxNumOfValidators\",\n  \"minNumOfValidators\",\n  \"delegationThreshold\",\n  \"minDeposit\",\n  \"maxCandidateMetadataSize\",\n];\n\nexport function defaultParams(): Params {\n  // FIXME: use the real default value.\n  return {\n    maxExtraDataSize: 0x20,\n    maxAssetSchemeMetadataSize: 0x400,\n    maxTransferMetadataSize: 0x100,\n    maxTextContentSize: 0x200,\n    networkId: \"tc\",\n    minPayTransactionCost: 100,\n    minSetRegularKeyTransactionCost: 10000,\n    minCreateShardTransactionCost: 1000000,\n    minSetShardOwnersTransactionCost: 100000,\n    minSetShardUsersTransactionCost: 10000,\n    minWrapCccTransactionCost: 100000,\n    minCustomTransactionCost: 0,\n    minStoreTransactionCost: 5000,\n    minRemoveTransactionCost: 5000,\n    minAssetMintCost: 100000,\n    minAssetTransferCost: 100,\n    minAssetSchemeChangeCost: 100000,\n    minAssetSupplyIncreaseCost: 100000,\n    minAssetComposeCost: 100000,\n    minAssetDecomposeCost: 100000,\n    minAssetUnwrapCccCost: 100,\n    maxBodySize: 4194304,\n    snapshotPeriod: 16384,\n    termSeconds: 0,\n    nominationExpiration: 0,\n    custodyPeriod: 0,\n    releasePeriod: 0,\n    maxNumOfValidators: 0,\n    minNumOfValidators: 0,\n    delegationThreshold: 0,\n    minDeposit: 0,\n    maxCandidateMetadataSize: 0,\n  };\n}\n\n// This is unsafe. Please use when you are confident that it is safe.\nfunction U64ValueToNumber(value: U64Value | null) {\n  return parseInt(U64.ensure(value || 0).toString(10), 10);\n}\n\nexport function paramsFromRPCParams(rpcParams: any): Params {\n  return {\n    maxExtraDataSize: U64ValueToNumber(rpcParams.maxExtraDataSize),\n    maxAssetSchemeMetadataSize: U64ValueToNumber(rpcParams.maxAssetSchemeMetadataSize),\n    maxTransferMetadataSize: U64ValueToNumber(rpcParams.maxTransferMetadataSize),\n    maxTextContentSize: U64ValueToNumber(rpcParams.maxTextContentSize),\n    networkId: rpcParams.networkID,\n    minPayTransactionCost: U64ValueToNumber(rpcParams.minPayCost),\n    minSetRegularKeyTransactionCost: U64ValueToNumber(rpcParams.minSetRegularKeyCost),\n    minCreateShardTransactionCost: U64ValueToNumber(rpcParams.minCreateShardCost),\n    minSetShardOwnersTransactionCost: U64ValueToNumber(rpcParams.minSetShardOwnersCost),\n    minSetShardUsersTransactionCost: U64ValueToNumber(rpcParams.minSetShardUsersCost),\n    minWrapCccTransactionCost: U64ValueToNumber(rpcParams.minWrapCccCost),\n    minCustomTransactionCost: U64ValueToNumber(rpcParams.minCustomCost),\n    minStoreTransactionCost: U64ValueToNumber(rpcParams.minStoreCost),\n    minRemoveTransactionCost: U64ValueToNumber(rpcParams.minRemoveCost),\n    minAssetMintCost: U64ValueToNumber(rpcParams.minMintAssetCost),\n    minAssetTransferCost: U64ValueToNumber(rpcParams.minTransferAssetCost),\n    minAssetSchemeChangeCost: U64ValueToNumber(rpcParams.minChangeAssetSchemeCost),\n    minAssetSupplyIncreaseCost: U64ValueToNumber(rpcParams.minIncreaseAssetSupplyCost),\n    minAssetComposeCost: U64ValueToNumber(rpcParams.minComposeAssetCost),\n    minAssetDecomposeCost: U64ValueToNumber(rpcParams.minDecomposeAssetCost),\n    minAssetUnwrapCccCost: U64ValueToNumber(rpcParams.minUnwrapCccCost),\n    maxBodySize: U64ValueToNumber(rpcParams.maxBodySize),\n    snapshotPeriod: U64ValueToNumber(rpcParams.snapshotPeriod),\n    termSeconds: U64ValueToNumber(rpcParams.termSeconds),\n    nominationExpiration: U64ValueToNumber(rpcParams.nominationExpiration),\n    custodyPeriod: U64ValueToNumber(rpcParams.custodyPeriod),\n    releasePeriod: U64ValueToNumber(rpcParams.releasePeriod),\n    maxNumOfValidators: U64ValueToNumber(rpcParams.maxNumOfValidators),\n    minNumOfValidators: U64ValueToNumber(rpcParams.minNumOfValidators),\n    delegationThreshold: U64ValueToNumber(rpcParams.delegationThreshold),\n    minDeposit: U64ValueToNumber(rpcParams.minDeposit),\n    maxCandidateMetadataSize: U64ValueToNumber(rpcParams.max_candidate_metadata_size),\n  };\n}\n\nexport function paramsToRLPBytes({ params, seq }: ParamsAndSeq): Buffer {\n  return RLP.encode([\n    0xff,\n    seq,\n    ParamsKeys.map(key => {\n      // FIXME: This code would be broken easily when a field is added to the Params.\n      if (key === \"networkId\") {\n        return params[key];\n      } else {\n        return U64ValueToNumber(params[key]);\n      }\n    }),\n  ]);\n}\n\nexport function paramsAndSignaturesToRLPBytes(\n  { params, seq }: ParamsAndSeq,\n  signatures: Signature[],\n): Buffer {\n  return RLP.encode([\n    0xff,\n    seq,\n    ParamsKeys.map(key => {\n      // FIXME: This code would be broken easily when a field is added to the Params.\n      if (key === \"networkId\") {\n        return params[key];\n      } else {\n        return U64ValueToNumber(params[key]);\n      }\n    }),\n    ...signatures.map(signature => {\n      if (signature.startsWith(\"0x\")) {\n        return signature;\n      } else {\n        return `0x${signature}`;\n      }\n    }),\n  ]);\n}\n\nfunction bufferToNumber(value: Buffer, debugFieldName: string): number {\n  try {\n    if (value.length === 0) {\n      return 0;\n    } else {\n      return value.readUIntBE(0, value.length);\n    }\n  } catch (err) {\n    const newError = new Error(`Failed to decode ${debugFieldName}`);\n    (newError as any).original = err;\n    throw newError;\n  }\n}\n\nexport function RLPBytesToParams(hex: string): ParamsAndSeq {\n  const decoded: Buffer[] = RLP.decode(new Buffer(hex, \"hex\")) as any;\n\n  if (decoded.length !== 3) {\n    throw new Error(`Invalid RLP: length of the input: ${decoded.length} should be 3}`);\n  }\n\n  if (decoded[2].length !== 32) {\n    throw new Error(`Invalid RLP: length of the input: ${decoded.length} should be 32}`);\n  }\n\n  if (decoded[0].toString(\"hex\") !== \"ff\") {\n    throw new Error(`Invalid format:  expected: \"ff\" but found ${decoded[0].toString(\"hex\")}`);\n  }\n  const seq = bufferToNumber(decoded[1], \"seq\");\n\n  const [\n    maxExtraDataSizeRaw,\n    maxAssetSchemeMetadataSizeRaw,\n    maxTransferMetadataSizeRaw,\n    maxTextContentSizeRaw,\n    networkIdRaw,\n    minPayTransactionCostRaw,\n    minSetRegularKeyTransactionCostRaw,\n    minCreateShardTransactionCostRaw,\n    minSetShardOwnersTransactionCostRaw,\n    minSetShardUsersTransactionCostRaw,\n    minWrapCccTransactionCostRaw,\n    minCustomTransactionCostRaw,\n    minStoreTransactionCostRaw,\n    minRemoveTransactionCostRaw,\n    minAssetMintCostRaw,\n    minAssetTransferCostRaw,\n    minAssetSchemeChangeCostRaw,\n    minAssetSupplyIncreaseCostRaw,\n    minAssetComposeCostRaw,\n    minAssetDecomposeCostRaw,\n    minAssetUnwrapCccCostRaw,\n    maxBodySizeRaw,\n    snapshotPeriodRaw,\n    termSecondsRaw,\n    nominationExpirationRaw,\n    custodyPeriodRaw,\n    releasePeriodRaw,\n    maxNumOfValidatorsRaw,\n    minNumOfValidatorsRaw,\n    delegationThresholdRaw,\n    minDepositRaw,\n    maxCandidateMetadataSizeRaw,\n  ] = decoded[2] as any;\n\n  const params = {\n    maxExtraDataSize: bufferToNumber(maxExtraDataSizeRaw, \"maxExtraDataSize\"),\n    maxAssetSchemeMetadataSize: bufferToNumber(\n      maxAssetSchemeMetadataSizeRaw,\n      \"maxAssetSchemeMetadataSize\",\n    ),\n    maxTransferMetadataSize: bufferToNumber(maxTransferMetadataSizeRaw, \"maxTransferMetadataSize\"),\n    maxTextContentSize: bufferToNumber(maxTextContentSizeRaw, \"maxTextContentSize\"),\n    networkId: networkIdRaw.toString(\"ascii\"),\n    minPayTransactionCost: bufferToNumber(minPayTransactionCostRaw, \"minPayTransactionCost\"),\n    minSetRegularKeyTransactionCost: bufferToNumber(\n      minSetRegularKeyTransactionCostRaw,\n      \"minSetRegularKeyTransactionCost\",\n    ),\n    minCreateShardTransactionCost: bufferToNumber(\n      minCreateShardTransactionCostRaw,\n      \"minCreateShardTransactionCost\",\n    ),\n    minSetShardOwnersTransactionCost: bufferToNumber(\n      minSetShardOwnersTransactionCostRaw,\n      \"minSetShardOwnersTransactionCost\",\n    ),\n    minSetShardUsersTransactionCost: bufferToNumber(\n      minSetShardUsersTransactionCostRaw,\n      \"minSetShardUsersTransactionCost\",\n    ),\n    minWrapCccTransactionCost: bufferToNumber(\n      minWrapCccTransactionCostRaw,\n      \"minWrapCccTransactionCost\",\n    ),\n    minCustomTransactionCost: bufferToNumber(\n      minCustomTransactionCostRaw,\n      \"minCustomTransactionCost\",\n    ),\n    minStoreTransactionCost: bufferToNumber(minStoreTransactionCostRaw, \"minStoreTransactionCost\"),\n    minRemoveTransactionCost: bufferToNumber(\n      minRemoveTransactionCostRaw,\n      \"minRemoveTransactionCost\",\n    ),\n    minAssetMintCost: bufferToNumber(minAssetMintCostRaw, \"minAssetMintCost\"),\n    minAssetTransferCost: bufferToNumber(minAssetTransferCostRaw, \"minAssetTransferCost\"),\n    minAssetSchemeChangeCost: bufferToNumber(\n      minAssetSchemeChangeCostRaw,\n      \"minAssetSchemeChangeCost\",\n    ),\n    minAssetSupplyIncreaseCost: bufferToNumber(\n      minAssetSupplyIncreaseCostRaw,\n      \"minAssetSupplyIncreaseCost\",\n    ),\n    minAssetComposeCost: bufferToNumber(minAssetComposeCostRaw, \"minAssetComposeCost\"),\n    minAssetDecomposeCost: bufferToNumber(minAssetDecomposeCostRaw, \"minAssetDecomposeCost\"),\n    minAssetUnwrapCccCost: bufferToNumber(minAssetUnwrapCccCostRaw, \"minAssetUnwrapCccCost\"),\n    maxBodySize: bufferToNumber(maxBodySizeRaw, \"maxBodySize\"),\n    snapshotPeriod: bufferToNumber(snapshotPeriodRaw, \"snapshotPeriod\"),\n    termSeconds: bufferToNumber(termSecondsRaw, \"termSeconds\"),\n    nominationExpiration: bufferToNumber(nominationExpirationRaw, \"nominationExpiration\"),\n    custodyPeriod: bufferToNumber(custodyPeriodRaw, \"custodyPeriod\"),\n    releasePeriod: bufferToNumber(releasePeriodRaw, \"releasePeriod\"),\n    maxNumOfValidators: bufferToNumber(maxNumOfValidatorsRaw, \"maxNumOfValidators\"),\n    minNumOfValidators: bufferToNumber(minNumOfValidatorsRaw, \"minNumOfValidators\"),\n    delegationThreshold: bufferToNumber(delegationThresholdRaw, \"delegationThreshold\"),\n    minDeposit: bufferToNumber(minDepositRaw, \"minDeposit\"),\n    maxCandidateMetadataSize: bufferToNumber(\n      maxCandidateMetadataSizeRaw,\n      \"maxCandidateMetadataSize\",\n    ),\n  };\n\n  return {\n    params,\n    seq,\n  };\n}\n\nexport type Signature = string;\n","import React, { Component } from \"react\";\nimport { Params, RLPBytesToParams, paramsFromRPCParams, ParamsAndSeq } from \"../types\";\nimport { Col, Form, Button, Row } from \"react-bootstrap\";\nimport { SDK } from \"codechain-sdk\";\n\ninterface OwnProps {\n  onLoadParamsAndSeq: (paramsAndSeq: ParamsAndSeq) => void;\n}\n\ninterface OwnState {\n  typedRLPEncoded: string;\n  typedCodeChainRPCURL: string;\n}\n\nasync function loadParamsFromRPC(rpcURL: string): Promise<Params> {\n  const sdk = new SDK({\n    server: rpcURL,\n  });\n  const rpcParams = await sdk.rpc.sendRpcRequest(\"chain_getCommonParams\", [null]);\n  return paramsFromRPCParams(rpcParams);\n}\n\nfunction loadSeqFromRPC(rpcURL: string): Promise<number> {\n  const sdk = new SDK({\n    server: rpcURL,\n  });\n  return sdk.rpc.sendRpcRequest(\"chain_getMetadataSeq\", [null]);\n}\n\nexport default class ParamsLoader extends Component<OwnProps, OwnState> {\n  public constructor(props: OwnProps) {\n    super(props);\n    this.state = {\n      typedRLPEncoded: \"\",\n      typedCodeChainRPCURL: \"\",\n    };\n  }\n\n  public render() {\n    return (\n      <Col xs=\"12\" className=\"border rounded px-5 py-3 bg-light\">\n        <Row>\n          <span className=\"col-12 col-lg-12 mb-3\">Load params from RLP Encoded Data</span>\n          <Col xs=\"12\" lg=\"9\" className=\"mb-3\">\n            <Form.Control\n              type=\"text\"\n              value={this.state.typedRLPEncoded}\n              onChange={this.handleRLPEncodedInputChange}\n              placeholder=\"Paste RLP encoded data of the Common Params\"\n            />\n          </Col>\n          <Col xs=\"12\" lg=\"3\">\n            <Button onClick={this.handleRLPEncodedClick} variant=\"primary\">\n              Import\n            </Button>\n          </Col>\n        </Row>\n        <Row>\n          <span className=\"col-12 mb-3\"> Load from RPC </span>\n          <Col xs=\"12\" lg=\"9\" className=\"mb-3\">\n            <Form.Control\n              type=\"text\"\n              value={this.state.typedCodeChainRPCURL}\n              onChange={this.handleRPCURLInputChange}\n              placeholder=\"Type CodeChain RPC URL\"\n            />\n          </Col>\n          <Col xs=\"12\" lg=\"3\">\n            <Button onClick={this.handleRPCURLClick} variant=\"primary\">\n              Import\n            </Button>\n          </Col>\n        </Row>\n      </Col>\n    );\n  }\n\n  private handleRLPEncodedInputChange = (event: any) => {\n    const text = event.target.value;\n    this.setState({\n      typedRLPEncoded: text,\n    });\n  };\n\n  private handleRLPEncodedClick = (_event: any) => {\n    const rawParams = this.state.typedRLPEncoded;\n\n    try {\n      const newParamsAndSeq = RLPBytesToParams(rawParams);\n      this.props.onLoadParamsAndSeq(newParamsAndSeq);\n    } catch (err) {\n      console.error(err);\n      // FIXME: show the error message in the page.\n      alert(err);\n    }\n  };\n\n  private handleRPCURLInputChange = (event: any) => {\n    const text = event.target.value;\n    this.setState({\n      typedCodeChainRPCURL: text,\n    });\n  };\n\n  private handleRPCURLClick = async (_event: any) => {\n    const rpcURL = this.state.typedCodeChainRPCURL;\n\n    try {\n      const [newParams, newSeq] = await Promise.all([\n        loadParamsFromRPC(rpcURL),\n        loadSeqFromRPC(rpcURL),\n      ]);\n      this.props.onLoadParamsAndSeq({\n        params: newParams,\n        seq: newSeq,\n      });\n    } catch (err) {\n      console.error(err);\n      alert(err);\n    }\n  };\n}\n","import React, { Component, FormEvent } from \"react\";\nimport { Params, ParamsKeys, ParamsAndSeq } from \"../types\";\nimport { Row, Col, Form } from \"react-bootstrap\";\n\ninterface OwnProps {\n  paramsAndSeq: ParamsAndSeq;\n  onChangeParamsAndSeq: (changedParams: ParamsAndSeq) => void;\n  disabled?: boolean;\n}\n\ninterface OwnState {\n  typedSeq: string;\n}\n\nclass ParamsEditor extends Component<OwnProps, OwnState> {\n  public constructor(props: OwnProps) {\n    super(props);\n\n    this.state = {\n      typedSeq: props.paramsAndSeq.seq.toString(),\n    };\n  }\n\n  public render() {\n    return (\n      <Col xs={12} className=\"border rounded px-5 py-3 bg-light\">\n        <Row>\n          <Col xs={12}>\n            {this.props.disabled || (\n              <span>\n                Edit Params\n                <br />\n                <em>Change parameters as you want</em>\n              </span>\n            )}\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={12}>\n            <Form className=\"row\">\n              <Form.Group className=\"col-12 col-lg-6 row\">\n                <Form.Label className=\"col-12 col-lg-8\" column>\n                  Seq\n                </Form.Label>\n                <Col xs={\"12\"} lg={\"4\"}>\n                  <Form.Control\n                    type=\"text\"\n                    value={String(this.state.typedSeq)}\n                    onChange={this.handleSeqInputChange}\n                    disabled={this.props.disabled}\n                  />\n                </Col>\n              </Form.Group>\n            </Form>\n            <Form className=\"row\">\n              {ParamsKeys.map(key => {\n                return (\n                  <Form.Group key={key} className=\"col-12 col-lg-6 row\">\n                    <Form.Label className=\"col-12 col-lg-8\" column>\n                      {key}\n                    </Form.Label>\n                    <Col xs={\"12\"} lg={\"4\"}>\n                      <Form.Control\n                        type=\"text\"\n                        value={String(this.props.paramsAndSeq.params[key])}\n                        onChange={(event: any) => this.handleParamsInputChange(key, event)}\n                        disabled={this.props.disabled}\n                      />\n                    </Col>\n                  </Form.Group>\n                );\n              })}\n            </Form>\n          </Col>\n        </Row>\n      </Col>\n    );\n  }\n\n  private handleSeqInputChange = (event: any) => {\n    const text = (event.target as HTMLInputElement).value;\n    this.setState({\n      typedSeq: text,\n    });\n    try {\n      const newSeq = parseInt(text, 10);\n      this.props.onChangeParamsAndSeq({\n        params: this.props.paramsAndSeq.params,\n        seq: newSeq,\n      });\n    } catch (_err) {\n      this.props.onChangeParamsAndSeq({\n        params: this.props.paramsAndSeq.params,\n        seq: 0,\n      });\n    }\n  };\n\n  private handleParamsInputChange = (key: keyof Params, event: FormEvent) => {\n    const text = (event.target as HTMLInputElement).value;\n    const newParams = {\n      ...this.props.paramsAndSeq.params,\n      [key]: text,\n    };\n    this.props.onChangeParamsAndSeq({\n      params: newParams,\n      seq: this.props.paramsAndSeq.seq,\n    });\n  };\n}\n\n(ParamsEditor as any).defaultProps = {\n  disabled: false,\n};\n\nexport default ParamsEditor;\n","import React, { Component } from \"react\";\nimport { Params, paramsToRLPBytes } from \"../types\";\nimport { Col } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\ninterface OwnProps {\n  params: Params;\n  seq: number;\n}\n\nexport default class PermalinkPrinter extends Component<OwnProps, any> {\n  public render() {\n    let rlpBytes = null;\n    try {\n      rlpBytes = paramsToRLPBytes({\n        params: this.props.params,\n        seq: this.props.seq,\n      }).toString(\"hex\");\n    } catch (_err) {\n      rlpBytes = null;\n    }\n\n    return (\n      <Col xs=\"12\" className=\"border rounded px-5 py-3 bg-light text-wrap\">\n        <span>Share</span>\n        <p>\n          <em>Please provide the link below to other stakeholders for signing.</em>\n          <br />\n          {rlpBytes && (\n            <Link to={`/${rlpBytes}`} className=\"overflow-wrap\">\n              {`${window.location.href}${rlpBytes}`}\n            </Link>\n          )}\n        </p>\n\n        <p className=\"overflow-wrap mt-1\">\n          <em>Please use the below RLP data of the Params to load later:</em>\n          <br />\n          {rlpBytes || \"Invalid Params\"}\n        </p>\n      </Col>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Signature } from \"../types\";\nimport { Col, Form, Button, Row } from \"react-bootstrap\";\n\ninterface OwnProps {\n  signatures: Signature[];\n  onAddSignature: (added: Signature) => void;\n  onRemoveSignature: (removed: Signature) => void;\n}\n\ninterface OwnState {\n  typed: string;\n}\n\nexport default class SignatureCollector extends Component<OwnProps, any> {\n  public constructor(props: OwnProps) {\n    super(props);\n    this.state = {\n      typed: \"\",\n    };\n  }\n\n  public render() {\n    return (\n      <Col xs=\"12\" className=\"border rounded px-5 py-3 bg-light\">\n        <Row>\n          <Col xs=\"12\" className=\"mb-3\">\n            <span>Collect signature</span>\n            <br />\n            <em>Paste signatures from other stake holders to the input box below.</em>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col className=\"mb-3\">\n            <Form.Control\n              type=\"text\"\n              value={this.state.typed}\n              onChange={this.handleInputChange}\n              placeholder=\"Paste signature\"\n            />\n          </Col>\n\n          <Col xs=\"12\" lg=\"3\">\n            <Button variant=\"primary\" onClick={this.handleAddButtonClick}>\n              Collect\n            </Button>\n          </Col>\n        </Row>\n\n        {this.props.signatures.length > 0 && (\n          <>\n            <span>Collected Signatures </span>\n            <ul>\n              {this.props.signatures.map(signature => (\n                <li key={signature} className=\"my-1 overflow-wrap\">\n                  {signature}\n                  <Button\n                    size=\"sm\"\n                    className=\"ml-1\"\n                    name={signature}\n                    onClick={this.handleRemoveClick}\n                    variant=\"outline-primary\"\n                  >\n                    delete\n                  </Button>\n                </li>\n              ))}\n            </ul>\n          </>\n        )}\n      </Col>\n    );\n  }\n\n  private handleRemoveClick = (event: any) => {\n    const toRemove: Signature = event.target.name;\n    this.props.onRemoveSignature(toRemove);\n  };\n\n  private handleInputChange = (event: any) => {\n    const text = event.target.value;\n    this.setState({\n      typed: text,\n    });\n  };\n\n  private handleAddButtonClick = (_event: any) => {\n    if (this.state.typed === \"\") {\n      return;\n    }\n\n    if (this.props.signatures.indexOf(this.state.typed) !== -1) {\n      // FXME: Use custom error window instead of the alert\n      alert(\"Cannot add duplicated signature\");\n      return;\n    }\n\n    this.props.onAddSignature(this.state.typed);\n    this.setState({\n      typed: \"\",\n    });\n  };\n}\n","import React, { Component } from \"react\";\nimport { Params, Signature, paramsAndSignaturesToRLPBytes } from \"../types\";\nimport { Col, Button } from \"react-bootstrap\";\n\ninterface OwnProps {\n  params: Params;\n  seq: number;\n  signatures: Signature[];\n}\n\ninterface OwnState {\n  paramsAndSignatures: string | null;\n}\n\nexport default class TransactionCreator extends Component<OwnProps, OwnState> {\n  public constructor(props: OwnProps) {\n    super(props);\n    this.state = {\n      paramsAndSignatures: null,\n    };\n  }\n\n  public render() {\n    return (\n      <Col xs=\"12\" className=\"border rounded px-5 py-3 bg-light\">\n        <div className=\"mb-3\">\n          <span>\n            Create Transaction\n            <br />\n            <em>\n              If you collected enough signatures, press the button below to create\n              ChangeCommonParams transaction.\n            </em>\n          </span>\n        </div>\n\n        <Button onClick={this.handleClick} className=\"mb-3\">\n          {\" \"}\n          Create Transaction{\" \"}\n        </Button>\n\n        {this.state.paramsAndSignatures && (\n          <p className=\"overflow-wrap\">\n            <em>Transaction is created.</em>\n            <br />\n            <em>Please use the encoded paramsAndSignatures in the stakeholder SDK.</em>\n            <br />\n            <br />\n            <span>{this.state.paramsAndSignatures}</span>\n          </p>\n        )}\n      </Col>\n    );\n  }\n\n  private handleClick = (_event: any) => {\n    const rlpBytes = paramsAndSignaturesToRLPBytes(\n      {\n        params: this.props.params,\n        seq: this.props.seq,\n      },\n      this.props.signatures,\n    );\n    this.setState({\n      paramsAndSignatures: rlpBytes.toString(\"hex\"),\n    });\n  };\n}\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router\";\nimport ParamsEditor from \"./Components/ParamsEditor\";\nimport { RLPBytesToParams } from \"./types\";\nimport { Row, Container, Col } from \"react-bootstrap\";\nimport { blake256 } from \"codechain-primitives\";\nimport * as RLP from \"rlp\";\n\ntype Props = RouteComponentProps;\n\nclass Viewer extends Component<Props> {\n  public render() {\n    const encodedParams = (this.props.match.params as any).encodedParams;\n    const paramsAndSeq = RLPBytesToParams(encodedParams);\n    return (\n      <Container>\n        <Row className=\"mt-5\">\n          <ParamsEditor paramsAndSeq={paramsAndSeq} onChangeParamsAndSeq={this.noOp} disabled />\n        </Row>\n        <Row className=\"mb-5 mt-3\">\n          <Col xs={12} className=\"border rounded px-5 py-3 bg-light overflow-wrap\">\n            Encoded Params: {encodedParams}\n            <br />\n            <br />\n            Hash of the Params: {blake256(RLP.encode(encodedParams).toString(\"hex\"))}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  private noOp() {}\n}\n\nexport default withRouter(Viewer);\n","import React from \"react\";\nimport ParamsLoader from \"./Components/ParamsLoader\";\nimport ParamsEditor from \"./Components/ParamsEditor\";\nimport PermalinkPrinter from \"./Components/PermalinkPrinter\";\nimport SignatureCollector from \"./Components/SignatureCollector\";\nimport TransactionCreator from \"./Components/TransactionCreator\";\nimport { Params, defaultParams, Signature, ParamsAndSeq } from \"./types\";\nimport { Container, Row } from \"react-bootstrap\";\nimport { Route } from \"react-router-dom\";\nimport Viewer from \"./Viewer\";\n\ntype AppState = {\n  seq: number;\n  params: Params;\n  signatures: Signature[];\n  // The `paramsEditorKey` is changed when the params and seq are updated from the loader.\n  // New ParamsEditor will be created if the paramsEditorKey is changed.\n  paramsEditorKey: number;\n};\n\nexport default class App extends React.Component<{}, AppState> {\n  public constructor(props: any) {\n    super(props);\n\n    this.state = {\n      seq: 0,\n      params: defaultParams(),\n      paramsEditorKey: 0,\n      signatures: [],\n    };\n  }\n\n  public render() {\n    return (\n      <>\n        <Route exact path={\"/\"} component={this.Index} />\n        <Route path={\"/:encodedParams\"} component={Viewer} />\n      </>\n    );\n  }\n\n  private Index = () => {\n    return (\n      <Container>\n        <h1 className=\"mt-3\">CodeChain Change Common Params</h1>\n        <Row className=\"mt-1\">\n          <ParamsLoader onLoadParamsAndSeq={this.handleLoadParamsAndSeq} />\n        </Row>\n        <Row className=\"mt-3\">\n          <ParamsEditor\n            key={this.state.paramsEditorKey}\n            paramsAndSeq={{ params: this.state.params, seq: this.state.seq }}\n            onChangeParamsAndSeq={this.handleChangeParamsAndSeq}\n          />\n        </Row>\n        <Row className=\"mt-3\">\n          <PermalinkPrinter params={this.state.params} seq={this.state.seq} />\n        </Row>\n        <Row className=\"mt-3\">\n          <SignatureCollector\n            signatures={this.state.signatures}\n            onAddSignature={this.handleAddSignature}\n            onRemoveSignature={this.handleRemoveSignature}\n          />\n        </Row>\n        <Row className=\"mt-3 mb-5\">\n          {/* The key props reset the TransactionCreator component when the signatures state is changed. */}\n          <TransactionCreator\n            params={this.state.params}\n            seq={this.state.seq}\n            signatures={this.state.signatures}\n            key={this.state.signatures.join(\"-\")}\n          />\n        </Row>\n      </Container>\n    );\n  };\n\n  private handleLoadParamsAndSeq = ({ params, seq }: ParamsAndSeq) => {\n    this.setState({\n      params,\n      seq,\n      paramsEditorKey: Math.random(),\n    });\n  };\n\n  private handleChangeParamsAndSeq = (changedParamsAndSeq: ParamsAndSeq) => {\n    this.setState({\n      params: changedParamsAndSeq.params,\n      seq: changedParamsAndSeq.seq,\n    });\n  };\n\n  private handleAddSignature = (signature: Signature) => {\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        signatures: [...prevState.signatures, signature],\n      };\n    });\n  };\n\n  private handleRemoveSignature = (toRemove: Signature) => {\n    this.setState(prevState => {\n      const newSignatures = [...prevState.signatures];\n      const index = prevState.signatures.indexOf(toRemove);\n      newSignatures.splice(index, 1);\n      return {\n        ...prevState,\n        signatures: newSignatures,\n      };\n    });\n  };\n}\n","/* eslint-disable @typescript-eslint/no-use-before-define */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}